.. _sec-file-format:

=====================
Tree Sequence Formats
=====================

The correlated genealogical trees that describe the shared ancestry of set of
samples are stored very concisely in ``msprime`` as a sequence of coalescent
records, represented in a collection of easy-to-understand tables.  These are
output by coalescent simulation in ``msprime`` or can be read in from another
source.  To make this information as efficient and easy as possible to use, we
store the data on disk in a `HDF5 <https://www.hdfgroup.org/HDF5/>`_ based file
format. This page fully documents this format allowing efficient and convenient
access to the genealogical data generated by ``msprime`` outside of the native
:ref:`Python API <sec-api>`. Using the specification defined here, it should be
straightforward to access tree sequence information in any language with `HDF5
support <https://en.wikipedia.org/wiki/Hierarchical_Data_Format#Interfaces>`_,
or to store genealogies from other sources efficiently using ``msprime``.

***********
Definitions
***********

To begin, here are definitions of some key ideas encountered later.

tree
    A "gene tree", i.e., the genealogical tree describing how each of the
    individuals at the tips of the tree are related to each other.

node
    Each branching point in each tree is associated with a particular ancestor,
    called "nodes".  Since each node represents a certain ancestor, it has a
    unique ``time``, thought of as her birth time, which determines the height
    of any branching points she is associated with.  A given node will be
    associated with branching points all trees across a region if that node is
    the most recent common ancestor to the subtending tips across that region.
    For each node, we record::
        (flags, population, time)
    where ``flags`` records information about the ancestor; ``population`` is
    the integer ID of the ancestor's (birth) population, and ``time`` is how
    long ago the ancestor was born.

samples
    The tips of the tree, that we have obtained data from.  A tree sequence
    must describe the entire common ancestry of all samples.  These are a
    special kind of node, having ``flags`` set to 1.

edgeset
    Tree sequences are constructed by specifying over which segments of genome
    which nodes inherit from which other nodes.  This information is stored by
    recording::
        (left, right, parent, children)
    where each node in the list ``children`` inherits from the node ``parent``
    on the half-open interval of chromosome ``[left, right)``.


Here are the formal requirements for a set of nodes and edgesets to make sense,
and to allow ``msprime``'s algorithms to work properly.

To disallow time travel and multiple inheritance:

1. Offspring must be born after their parents (and hence, no loops).
2. The set of intervals on which each individual is a child must be disjoint.

and for algorithmic reasons:

3. The leftmost endpoint of each chromosome is 0.0.
4. Node times must be strictly greater than zero.
5. The set of intervals on which each individual is a parent must be disjoint.
6. The list of offspring in an edgeset must be sorted.
7. Edgesets must be sorted in nondecreasing time order.

Note that since each node time is equal to the (birth) time of the
corresponding parent, time is measured in clock time (not meioses).


*******************
Working with Tables
*******************

This section will have the requirements that tables (in text format)
must satisfy to be valid, illustrated with some examples.

Consider the following sequence of trees::
    time
    ----
    1.0                6
    0.7               / \                                       5
                     /   \                                     / \
    0.5             /     4                 4                 /   4
                   /     / \               / \               /   / \
    0.4           /     /   \             /   3             /   /   \
                 /     /     \           /   / \           /   /     \
                /     /       \         /   /   \         /   /       \
               /     /         \       /   /     \       /   /         \
    0.0       0     1           2     1   0       2     0   1           2
    
    position 0.0                  0.2               0.8                1.0

First, we specify the nodes in a ``NodeTable``::
    id      is_sample   time
    0       1           0
    1       1           0
    2       1           0
    3       0           0.4
    4       0           0.5
    5       0           0.7
    6       0           1.0

Recall that the first column, ``id``, is not actually recorded, only provided for convencience.
This has three samples: nodes 0, 1, and 2, and lists their birth times.
Then, we specify the edgesets::
    left    right   parent  children
    0.2     0.8     3       0,2
    0.0     0.2     4       1,2
    0.2     0.8     4       1,3
    0.8     1.0     4       1,2
    0.8     1.0     5       0,4
    0.0     0.2     6       0,4

Since node 3 is most recent, the edgeset that says that nodes 0 and 2 inherit from node 3
on the interval between 0.2 and 0.8 comes first.
Next are the edgesets from node 4: there are three of these,
for each of the three genomic intervals over which node 4 is ancestor to a distinct set of nodes.
At this point, we know the full tree on the middle interval.
Finally, edgesets specifying the common ancestor of 0 and 4 on the remaining intervals
(parents 6 and 5 respectively) allow us to construct all trees across the entire interval.


**********
Tables API
**********

This section will describe how to work with tables.

Include up top something about `.add_row()` versus `.set_columns()`.

+++++++++
NodeTable
+++++++++

.. autoclass:: msprime.NodeTable

++++++++++++
EdgesetTable
++++++++++++

.. autoclass:: msprime.EdgesetTable

+++++++++++++
MutationTable
+++++++++++++

.. autoclass:: msprime.MutationTable

+++++++++++++++++
Import and export
+++++++++++++++++

This section describes how to extract tables from a ``TreeSequence``,
and how to construct a ``TreeSequence`` from tables.
Since tree sequences are immutible,
often the best way to modify a ``TreeSequence`` 
is (for ``ts`` a ``TreeSequence``)::
    nodes = msprime.NodeTable()
    edgesets = msprime.EdgesetTable()
    ts.dump_tables(nodes=nodes, edgesets=edgesets)
    # (modify nodes and edgesets)
    ts.load_tables(nodes=nodes, edgesets=edgesets)


.. autofunction:: msprime.TreeSequence.ts.load_tables

.. autofunction:: msprime.TreeSequence.ts.dump_text

.. autofunction:: msprime.TreeSequence.ts.dump_tables

.. autofunction:: msprime.TreeSequence.ts.dump_samples_text



***********
HDF5 Format
***********

The file format is broken into a number of groups. Each group contains
datasets to define the data along with attributes to provide necessary
contextual information.

The root group contains one attributes, ``format_version``. This
is a pair ``(major, minor)`` describing the file format version. This
document describes version 3.2.

================    ==============      ======      ===========
Path                Type                Dim         Description
================    ==============      ======      ===========
/format_version     H5T_STD_U32LE       2           The (major, minor) file format version.
================    ==============      ======      ===========

++++++++++++++++++
Provenance dataset
++++++++++++++++++

The provenance dataset records information relating the the provenance
of a particular tree sequence file. When a tree sequence file is generated
all the information required to reproduce the file should be encoded
as a string and stored in this dataset. Subsequent modifications to the
file should be also be recorded and appended to the list of strings.

The format of these strings is implementation defined. In the
current version of ``msprime`` provenance information is encoded
as JSON. This information is incomplete, and will be updated in future
versions.

================    ==============      ======      ===========
Path                Type                Dim         Description
================    ==============      ======      ===========
/provenance         H5T_STRING          Scalar      Provenance information.
================    ==============      ======      ===========

+++++++++++++++
Mutations group
+++++++++++++++

The ``mutations`` group is optional, and describes the location of mutations
with respect to tree nodes and their positions along the sequence. Each mutation
consists of a node (which must be defined in the ``trees`` group) and a
position. Positions are defined as a floating point value to allow us to
express infinite sites mutations. A mutation position :math:`x` is defined on the same
scale as the genomic coordinates for trees, and so we must have
:math:`0 \leq x < L`, where :math:`L` is the largest value in the
``/trees/breakpoints`` dataset.

As for the coalescence records in the ``trees`` group, mutation records are
stored as seperate vectors for efficiency reasons. Mutations must be stored
in nondecreasing order of position.

===================     ==============      =====
Path                    Type                Dim
===================     ==============      =====
/mutations/node         H5T_STD_U32LE       M
/mutations/position     H5T_IEEE_F64LE      M
===================     ==============      =====

+++++++++++
Trees group
+++++++++++

The ``trees`` group is mandatory and describes the topology of the tree
sequence. The ``trees`` group contains a number of nested groups and datasets,
which we will describe in turn.

^^^^^^^^^^^^^^^^^^^
Breakpoints dataset
^^^^^^^^^^^^^^^^^^^

The ``/trees/breakpoints`` dataset records the floating point positions of the
breakpoints between trees in the tree sequence, and the flanking positions
:math:`0` and :math:`L`. Positions in the ``/trees/records`` group refer to
(zero based) indexes into this array. The first breakpoint must be zero, and
they must be listed in increasing order.

=======================     ==============
Path                        Type
=======================     ==============
/trees/breakpoints          H5T_IEEE_F64LE
=======================     ==============

^^^^^^^^^^^
Nodes group
^^^^^^^^^^^

The ``/trees/nodes`` group records information about the individual
nodes in a tree sequence. Leaf nodes (from :math:`0` to :math:`n - 1`)
represent the samples and internal nodes (:math:`\geq n`) represent
their ancestors. Each node corresponds to a particular individual that
lived at some time time in the history of the sample. The ``nodes``
group is used to record information about these individuals.

=======================     ==============
Path                        Type
=======================     ==============
/trees/nodes/population     H5T_STD_U32LE
/trees/nodes/time           H5T_IEEE_F64LE
=======================     ==============

^^^^^^^^^^^^^
Records group
^^^^^^^^^^^^^

The ``/trees/records`` group stores the individual coalesence records.
Each record consists of four pieces of information: the left and
right coordinates of the coalescing interval, the list of child nodes
and the parent node.

The ``left`` and ``right`` datasets are indexes into the ``/trees/breakpoints``
dataset and define the genomic interval over which the record applies. The
interval is half-open, so that the left coordinate is inclusive and the right
coordinate is exclusive.

The ``node`` dataset records the parent node of the record, and is
an index into the ``/trees/nodes`` group.

The ``num_children`` dataset records the number of children for a particular
record. The ``children`` dataset then records the actual child nodes for each
coalescence record. This 1-dimensional array lists the child nodes for every
record in order, and therefore by using the ``num_children`` array we can
efficiently recover the actual children involved in each event. Within a given
event, child nodes must be sorted in increasing order. The records must be
listed in time increasing order.

===================       ==============      ======
Path                      Type                Dim
===================       ==============      ======
/trees/left               H5T_STD_U32LE       N
/trees/right              H5T_STD_U32LE       N
/trees/node               H5T_STD_U32LE       N
/trees/num_children       H5T_STD_U32LE       N
/trees/children           H5T_STD_U32LE       :math:`\leq 2 \times` N
===================       ==============      ======

^^^^^^^^^^^^^
Indexes group
^^^^^^^^^^^^^

The ``/trees/indexes`` group records information required to efficiently
reconstruct the individual trees from the tree sequence. The
``insertion_order`` dataset contains the order in which records must be applied
and the ``removal_order`` dataset the order in which records must be
removed for a left-to-right traversal of the trees.

==============================     ==============
Path                               Type
==============================     ==============
/trees/indexes/insertion_order     H5T_STD_U32LE
/trees/indexes/removal_order       H5T_STD_U32LE
==============================     ==============
